/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: akshatmittal (https://sketchfab.com/akshatmittal)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/iphone-14-pro-max-95f11f5a06604c8b9fd44046ae52a9cc
Title: iPhone 14 Pro Max
*/
"use client";
import { useEffect,useLayoutEffect, useRef } from "react";
import gsap, { ScrollTrigger } from "gsap/all";
import { useGLTF, Center,PresentationControls,Float, Backdrop } from "@react-three/drei";

gsap.registerPlugin(ScrollTrigger);


export default function Iphone(props) {
  const iphone = useRef();
  const tl = useRef();
  const viewport = window.innerHeight;
  const { nodes, materials } = useGLTF("/models/iphone.glb");

  useLayoutEffect(() => {
    tl.current = gsap.timeline();
    const scaleStart = 1
    // ref.current.scale.set(scaleStart, scaleStart, scaleStart);
    // ref.current.position.set(0, -.5, 0);
    // gsap.set(ref.current.scale, { x: scaleStart, y: scaleStart, z: scaleStart });

  });

  // useEffect(() => {
  //   const element = ref.current;
  
  //   const scaleEnd = .05
  //   const rotation = Math.PI;;
  //   const sceneDuration = window.innerHeight;
  //   const pause = 0.05;
  //   tl.current.to(element.scale, {
  //     scrollTrigger: {
  //       // trigger: element,
  //       start: 0,
  //       end: sceneDuration,
  //       // ease: "expo.inOut",
  //       scrub: true,
  //     },
  //     x: scaleEnd,
  //     y: scaleEnd,
  //     z: scaleEnd,
  //   })
  //   tl.current.to(element.position, {
  //     scrollTrigger: {
  //       // trigger: element,
  //       start: 0,
  //       end: sceneDuration,
  //       // ease: "expo.inOut",
  //       scrub: true,
  //     },
  //     x: 0,
  //     y: -.5,
  //     z: 0,
  //   })
  useEffect(() => {
    if(!iphone.current) return
    const element = iphone.current;
      tl.current.to(element.position, {
        scrollTrigger: {
          trigger: element,
          start: 0,
          end: 500,
          ease: "circ.inOut",
          scrub: true,
          // pin: element,
        },
        z: -.3,
        y: Math.PI/2,
      })
      // tl.current.to(element.scale, {
      //   scrollTrigger: {
      //     trigger: element,
      //     start: 0,
      //     end: 500,
      //     ease: "circ.inOut",
      //     scrub: true,
      //     pin: element,
      //   },
      //   x: 1,
      //   y: 1,
      //   z: 1,
      // })
      tl.current.to(element.rotation, {
        scrollTrigger: {
          trigger: element,
          start: 0,
          end: 500,
          ease: "circ.inOut",
          scrub: true,
          // pin: element,
        },
        x: 0,
        y: 0,
        z: 0,
      })
      

  }, []);
  return (
    <Center>
      <group ref={iphone} {...props} dispose={null} position={[0, 0, 0]} scale={[3,3,3]} rotation={[0,0,0]}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.mesh025.geometry}
          material={materials.frame}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.mesh025_1.geometry}
          material={materials.__FUNDO_SIN_CARD_21}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.mesh025_2.geometry}
          material={materials.screen}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.mesh025_3.geometry}
          material={materials.back}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.mesh025_4.geometry}
          material={materials.island}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.mesh025_5.geometry}
          material={materials.Labber}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.mesh025_6.geometry}
          material={materials.GLASS}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.mesh025_7.geometry}
          material={materials.Lenscover}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.mesh025_8.geometry}
          material={materials.CA}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.mesh025_9.geometry}
          material={materials.GLS}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.mesh025_10.geometry}
          material={materials["Material.003"]}
        />
      </group>
    </Center>
  );
}

useGLTF.preload("/models/iphone.glb");
